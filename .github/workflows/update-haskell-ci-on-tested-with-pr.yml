name: Update CI when PR title starts with "tested-with"

on:
  pull_request:
    # Fire for typical PR lifecycle events
    types: [opened, edited, synchronize, reopened]
    # Only run when the specified file(s) are part of the PR diff.
    # CHANGE THIS to the path(s) you care about (supports globs).
    paths:
      - 'package.cabal'
      # - 'cabal.project'
      # - 'path/to/your/tested-with.txt'
      # - '**/*.cabal'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  update-ci:
    # Require: title starts with "tested-with" (case-insensitive)
    # and PR originates from the same repository (safe to push back)
    if: >
      startsWith(toLower(github.event.pull_request.title), 'tested-with') &&
      github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest

    steps:
      - name: Check out PR branch
        uses: actions/checkout@v4
        with:
          # Checkout the PR head branch so we can commit back to it
          ref: ${{ github.head_ref }}

      # If you already have a repo script that regenerates CI, just run it.
      # Otherwise, the next steps show installing and running haskell-ci directly.
      - name: Run project CI update script (if present)
        id: maybe_script
        shell: bash
        run: |
          set -euxo pipefail
          if [ -x ./scripts/update-ci.sh ]; then
            ./scripts/update-ci.sh
            echo "ran_script=true" >> "$GITHUB_OUTPUT"
          else
            echo "ran_script=false" >> "$GITHUB_OUTPUT"
          fi

      # Haskell-specific: install haskell-ci from source and regenerate workflows
      - name: Set up Haskell toolchain
        if: steps.maybe_script.outputs.ran_script == 'false'
        uses: haskell/actions/setup@v2
        with:
          ghc-version: "9.6.6"
          cabal-version: "3.10.3.0"

      - name: Install haskell-ci
        if: steps.maybe_script.outputs.ran_script == 'false'
        run: |
          set -euxo pipefail
          git clone --depth 1 https://github.com/haskell-CI/haskell-ci.git .tooling/haskell-ci
          cd .tooling/haskell-ci
          cabal update
          cabal build exe:haskell-ci
          cabal install exe:haskell-ci --overwrite-policy=always --installdir="$HOME/.local/bin" --install-method=copy
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Regenerate workflows with haskell-ci
        if: steps.maybe_script.outputs.ran_script == 'false'
        run: |
          set -euxo pipefail
          # If your repo uses a .haskell-ci file, regenerate from it:
          if [ -f .haskell-ci ]; then
            haskell-ci regenerate
          else
            # Fallback: generate from cabal metadata (adjust command as needed)
            haskell-ci generate
          fi

      - name: Commit changes back to PR branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): regenerate CI from tested-with PR"
          branch: ${{ github.head_ref }}
          # Limit to the typical files haskell-ci and your script may edit
          file_pattern: |
            .github/workflows/**
            .haskell-ci
            *.cabal
            cabal.project*
            ci/**
