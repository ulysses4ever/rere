name: Update Haskell CI when PR updates .cabal file and its title starts with "tested-with"

on:
  pull_request:
    # Fire for typical PR lifecycle events
    types: [opened, reopened]
    # Only run when the specified file(s) are part of the PR diff.
    # CHANGE THIS to the path(s) you care about (supports globs).
    paths:
      - '**/*.cabal'

permissions:
  contents: write
  pull-requests: write

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  gate:
    runs-on: ubuntu-latest
    outputs:
      eligible: ${{ steps.gate.outputs.eligible }}
    steps:
      - name: Decide eligibility (title starts with tested-with, same-repo PR)
        id: gate
        shell: bash
        run: |
          set -euo pipefail
          # Read and sanitize the PR title (handles quotes)
          title=${{ toJSON(github.event.pull_request.title) }}
          title=${title#\"}; title=${title%\"}
          head_repo="${{ github.event.pull_request.head.repo.full_name }}"
          base_repo="${{ github.repository }}"

          title_ok=false
          if printf '%s' "$title" | grep -qiE '^tested-with'; then
            title_ok=true
          fi

          same_repo=false
          if [ "$head_repo" = "$base_repo" ]; then
            same_repo=true
          fi

          eligible=false
          if [ "$title_ok" = true ] && [ "$same_repo" = true ]; then
            eligible=true
          fi

          echo "Eligibility: title_ok=$title_ok, same_repo=$same_repo, eligible=$eligible"
          echo "eligible=$eligible" >> "$GITHUB_OUTPUT"


  update-ci:
    needs: gate
    if: needs.gate.outputs.eligible == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Check out PR branch
        uses: actions/checkout@v4
        with:
          # Checkout the PR head branch so we can commit back to it
          ref: ${{ github.head_ref }}

      # Haskell-specific: install haskell-ci from source and regenerate workflows
      - name: Set up Haskell toolchain
        uses: haskell/actions/setup@v2
        with:
          ghc-version: "latest"
          cabal-version: "latest"

      - name: Install haskell-ci
        run: |
          set -euxo pipefail
          git clone --depth 1 https://github.com/haskell-CI/haskell-ci.git .tooling/haskell-ci
          cd .tooling/haskell-ci
          cabal update
          cabal build exe:haskell-ci
          cabal install exe:haskell-ci --overwrite-policy=always --installdir="$HOME/.local/bin" --install-method=copy
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"

      - name: Regenerate workflows with haskell-ci
        run: |
          set -euxo pipefail
          # If your repo uses a .haskell-ci file, regenerate from it:
          if [ -f .haskell-ci ]; then
            haskell-ci regenerate
          else
            # Fallback: generate from cabal metadata (adjust command as needed)
            haskell-ci generate
          fi

      - name: Commit changes back to PR branch
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(ci): regenerate CI from tested-with PR"
          branch: ${{ github.head_ref }}
          # Limit to the typical files haskell-ci may edit
          file_pattern: |
            .github/workflows/**
            .haskell-ci
